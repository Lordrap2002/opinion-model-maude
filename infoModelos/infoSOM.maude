load ../base/semantics .

mod DEFINITION is
   pr FLOAT .
   pr REW-RELATION .
   subsort Nat < Agent .

   var AG          : Agent .
   var F S T F'    : Float .
   var SN          : SetOpinion .
   vars SE EDGES   : SetEdge .
   vars STEPS COMM : Nat .

   op [_,_,_] : Float Float Float -> Info [ctor] .
   op [_,_,_,_] : Float Float Float Float -> Info [ctor] .

   eq opinion(AG, < nodes: (< AG : [F, S, T] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = F .
   eq opinion([F, S, T]) = F .
   eq opinion(AG, < nodes: (< AG : [F, S, T, F'] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = F .
   eq opinion([F, S, T, F']) = F .

   op silentState : Agent State -> Float .
   eq silentState(AG, < nodes: (< AG : [F, S, T] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = S .
   eq silentState(AG, < nodes: (< AG : [F, S, T, F'] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = S .

   op tolerance : Agent State -> Float .
   eq tolerance(AG, < nodes: (< AG : [F, S, T] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = T .
   eq tolerance(AG, < nodes: (< AG : [F, S, T, F'] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = T .
   
   op pOpinion : Agent State -> Float .
   eq pOpinion(AG, < nodes: (< AG : [F, S, T, F'] >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = F' .
endm

mod SOM- is
   pr DEFINITION .

   vars AG AG' AG'' : Agent .
   vars SE          : SetEdge .
   var SO SO'       : SetOpinion .
   var STATE        : State .
   vars SCOUNT SUMW : Float .
   vars F F' W      : Float .
   vars S S' T T'   : Float .

   op deGroot : SetEdge -> SetSetEdge .
   eq deGroot(SE) = SE .

   op update-SOM- : State SetEdge Agent -> Info .
   eq update-SOM-(STATE, SE, AG) = 
      [opinion(AG, STATE) + prod-diff(AG, nodes(STATE), SE), silent(AG, STATE, SE), tolerance(AG, STATE)] .

   op prod-diff : Agent SetOpinion SetEdge -> Float .
   op prod-diff : Agent SetOpinion SetEdge Float -> Float .
   eq prod-diff(AG, SO, SE) = prod-diff(AG, SO, SE, 0.0) .
   eq prod-diff(AG, SO, empty, SUMW) = SUMW .
   eq prod-diff(AG, (SO, < AG : [F, S, T] >, < AG' : [F', S', T'] >), ( < (AG', AG ) :  W  >, SE), SUMW) = 
      prod-diff(AG, (SO, < AG : [F, S, T] >, < AG' : [F', S', T'] >), SE, SUMW + ((F' - F) * W * S')) .
   eq prod-diff(AG, SO, ( < (AG' , AG'') :  W  >, SE), SUMW) = 
      prod-diff(AG, SO, SE, SUMW) [owise] .

   op silent : Agent State SetEdge -> Float [memo] .
   eq silent(AG, STATE, SE) =
      if ceiling(| nSilentNeigh(AG, nodes(STATE), SE) | / 2) <= 
      | withinTol(opinion(AG, STATE), tolerance(AG, STATE), nSilentNeigh(AG, nodes(STATE), SE)) | then 1.0
      else 0.0 fi .

   op nSilentNeigh : Agent SetOpinion SetEdge -> SetOpinion [memo] .
   op nSilentNeigh : Agent SetOpinion SetEdge SetOpinion -> SetOpinion [memo] .
   eq nSilentNeigh(AG, SO, SE) = nSilentNeigh(AG, SO, SE, empty) .
   eq nSilentNeigh(AG, SO, empty, SO') = SO' .
   eq nSilentNeigh(AG, (SO, < AG : [F, S, T] >, < AG' : [F', 1.0, T'] >), ( < (AG', AG ) :  W  >, SE), SO') = 
      nSilentNeigh(AG, (SO, < AG : [F, S, T] >, < AG' : [F', 1.0, T'] >), SE, (SO', < AG' : [F', 1.0, T'] >)) .
   eq nSilentNeigh(AG, SO, ( < (AG' , AG'') :  W  >, SE), SO') = 
      nSilentNeigh(AG, SO, SE, SO') [owise].

   op withinTol : Float Float SetOpinion -> SetOpinion [memo] .
   op withinTol : Float Float SetOpinion SetOpinion -> SetOpinion [memo] .
   eq withinTol(F, T, SO) = withinTol(F, T, SO, empty) .
   eq withinTol(F, T, empty, SO') = SO' .
   eq withinTol(F, T, (SO, < AG : [F', S, T'] >), SO') =
      if abs(F' - F) <= T then withinTol(F, T, SO, (SO', < AG : [F', S, T'] >))
      else withinTol(F, T, SO, SO') fi .
endm

mod SOM+ is
   pr DEFINITION .

   vars AG AG' AG'' : Agent .
   vars SE          : SetEdge .
   var SO SO'       : SetOpinion .
   var STATE        : State .
   vars SCOUNT SUMW : Float .
   vars F F' W H H' : Float .
   vars S S' T T'   : Float .

   op deGroot : SetEdge -> SetSetEdge .
   eq deGroot(SE) = SE .

   op update-SOM+ : State SetEdge Agent -> Info .
   eq update-SOM+(STATE, SE, AG) = 
      [opinion(AG, STATE) + prod-diff(AG, nodes(STATE), SE), silent(AG, STATE, SE), tolerance(AG, STATE),
      upPublicOp(AG, nodes(STATE), silent(AG, STATE, SE), opinion(AG, STATE) + prod-diff(AG, nodes(STATE), SE))] .

   op prod-diff : Agent SetOpinion SetEdge -> Float .
   op prod-diff : Agent SetOpinion SetEdge Float -> Float .
   eq prod-diff(AG, SO, SE) = prod-diff(AG, SO, SE, 0.0) .
   eq prod-diff(AG, SO, empty, SUMW) = SUMW .
   eq prod-diff(AG, (SO, < AG : [F, S, T, H] >, < AG' : [F', S', T', H'] >), ( < (AG', AG ) :  W  >, SE), SUMW) = 
      prod-diff(AG, (SO, < AG : [F, S, T, H] >, < AG' : [F', S', T', H'] >), SE, SUMW + ((H' - F) * W)) .
   eq prod-diff(AG, SO, ( < (AG' , AG'') :  W  >, SE), SUMW) = 
      prod-diff(AG, SO, SE, SUMW) [owise] .

   op silent : Agent State SetEdge -> Float .
   eq silent(AG, STATE, SE) =
      if ceiling(| nNeigh(AG, nodes(STATE), SE) | / 2) <= 
      | withinTol(opinion(AG, STATE), tolerance(AG, STATE), nNeigh(AG, nodes(STATE), SE)) | then 1.0
      else 0.0 fi .

   op nNeigh : Agent SetOpinion SetEdge -> SetOpinion .
   op nNeigh : Agent SetOpinion SetEdge SetOpinion -> SetOpinion .
   eq nNeigh(AG, SO, SE) = nNeigh(AG, SO, SE, empty) .
   eq nNeigh(AG, SO, empty, SO') = SO' .
   eq nNeigh(AG, (SO, < AG : [F, S, T, H] >, < AG' : [F', S', T', H'] >), ( < (AG', AG ) :  W  >, SE), SO') = 
      nNeigh(AG, (SO, < AG : [F, S, T, H] >, < AG' : [F', S', T', H'] >), SE, (SO', < AG' : [F', S', T', H'] >)) .
   eq nNeigh(AG, SO, ( < (AG' , AG'') :  W  >, SE), SO') = 
      nNeigh(AG, SO, SE, SO') [owise].

   op withinTol : Float Float SetOpinion -> SetOpinion .
   op withinTol : Float Float SetOpinion SetOpinion -> SetOpinion .
   eq withinTol(F, T, SO) = withinTol(F, T, SO, empty) .
   eq withinTol(F, T, empty, SO') = SO' .
   eq withinTol(F, T, (SO, < AG : [F', S, T', H] >), SO') =
      if abs(F - H) <= T then withinTol(F, T, SO, (SO', < AG : [F', S, T', H] >))
      else withinTol(F, T, SO, SO') fi .

   op upPublicOp : Agent SetOpinion Float Float -> Float .
   eq upPublicOp(AG, (SO, < AG : [F, S, T, H] >), W, F') = 
      if W == 1.0 then F'
      else H fi .
endm