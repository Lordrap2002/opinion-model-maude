search [1] in TEST : init =>* STATE such that consensus(STATE) = true .
*********** equation
eq init = initnet in step: 0 comm: 0 strat: empty .
empty substitution
init
--->
initnet in step: 0 comm: 0 strat: empty
*********** equation
eq initnet = < nodes: nodes ; edges: edges > .
empty substitution
initnet
--->
< nodes: nodes ; edges: edges >
*********** equation
eq nodes = < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 :
    ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > .
empty substitution
nodes
--->
< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
*********** equation
eq edges = ((((((((((<(3,1): 1.0 >, <(3,2): 1.0 >), <(3,0): 1.0 >), <(2,3): 1.0 >), <(2,1): 1.0
    >), <(2,0): 1.0 >), <(1,3): 1.0 >), <(1,2): 1.0 >), <(1,0): 1.0 >), <(0,3): 1.0 >), <(0,2):
    1.0 >), <(0,1): 1.0 > .
empty substitution
edges
--->
((((((((((<(3,1): 1.0 >, <(3,2): 1.0 >), <(3,0): 1.0 >), <(2,3): 1.0 >), <(2,1): 1.0 >), <(2,
    0): 1.0 >), <(1,3): 1.0 >), <(1,2): 1.0 >), <(1,0): 1.0 >), <(0,3): 1.0 >), <(0,2): 1.0 >),
    <(0,1): 1.0 >
*********** equation
eq consensus(< nodes: SO:SetOpinion ; edges: SE > in step: STEPS comm: COMM strat: EDGES) =
    consensus(SO:SetOpinion) .
SO:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
consensus(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
consensus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 :
    ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >))
*********** trial #1
ceq consensus((SO:SetOpinion, < AG : I:Info >, < AG' : I':Info >)) = false if abs(opinion(
    I:Info) - opinion(I':Info)) > EPSILON = true .
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
*********** solving condition fragment
abs(opinion(I:Info) - opinion(I':Info)) > EPSILON = true
*********** equation
eq opinion([ST,F] M) = F .
ST --> "o"
F --> -1.0000000000000001e-1
M --> ["g",1.0]
opinion(["o",-1.0000000000000001e-1] ["g",1.0])
--->
-1.0000000000000001e-1
*********** equation
eq opinion([ST,F] M) = F .
ST --> "o"
F --> 1.0
M --> ["g",-1.0]
opinion(["o",1.0] ["g",-1.0])
--->
1.0
*********** equation
(built-in equation for symbol _-_)
-1.0000000000000001e-1 - 1.0
--->
-1.1000000000000001
*********** equation
(built-in equation for symbol abs)
abs(-1.1000000000000001)
--->
1.1000000000000001
*********** equation
eq EPSILON = 1.0e-2 .
empty substitution
EPSILON
--->
1.0e-2
*********** equation
(built-in equation for symbol _>_)
1.1000000000000001 > 1.0e-2
--->
true
*********** success for condition fragment
abs(opinion(I:Info) - opinion(I':Info)) > EPSILON = true
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
*********** success #1
*********** equation
ceq consensus((SO:SetOpinion, < AG : I:Info >, < AG' : I':Info >)) = false if abs(opinion(
    I:Info) - opinion(I':Info)) > EPSILON = true .
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
consensus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 :
    ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >))
--->
false
*********** trial #2
crl STATE => STATE' if not consensus(STATE) = true /\ SETEDGE':SetEdge ; SSE:SetSetEdge :=
    strategy(edges(STATE), STATE) /\ STATE' := step([moduleName], STATE, SETEDGE':SetEdge) [
    label step] .
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE':SetEdge --> (unbound)
SSE:SetSetEdge --> (unbound)
STATE' --> (unbound)
*********** solving condition fragment
not consensus(STATE) = true
*********** equation
eq consensus(< nodes: SO:SetOpinion ; edges: SE > in step: STEPS comm: COMM strat: EDGES) =
    consensus(SO:SetOpinion) .
SO:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
consensus(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
consensus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 :
    ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >))
*********** trial #3
ceq consensus((SO:SetOpinion, < AG : I:Info >, < AG' : I':Info >)) = false if abs(opinion(
    I:Info) - opinion(I':Info)) > EPSILON = true .
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
*********** solving condition fragment
abs(opinion(I:Info) - opinion(I':Info)) > EPSILON = true
*********** equation
eq opinion([ST,F] M) = F .
ST --> "o"
F --> -1.0000000000000001e-1
M --> ["g",1.0]
opinion(["o",-1.0000000000000001e-1] ["g",1.0])
--->
-1.0000000000000001e-1
*********** equation
eq opinion([ST,F] M) = F .
ST --> "o"
F --> 1.0
M --> ["g",-1.0]
opinion(["o",1.0] ["g",-1.0])
--->
1.0
*********** equation
(built-in equation for symbol _-_)
-1.0000000000000001e-1 - 1.0
--->
-1.1000000000000001
*********** equation
(built-in equation for symbol abs)
abs(-1.1000000000000001)
--->
1.1000000000000001
*********** equation
eq EPSILON = 1.0e-2 .
empty substitution
EPSILON
--->
1.0e-2
*********** equation
(built-in equation for symbol _>_)
1.1000000000000001 > 1.0e-2
--->
true
*********** success for condition fragment
abs(opinion(I:Info) - opinion(I':Info)) > EPSILON = true
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
*********** success #3
*********** equation
ceq consensus((SO:SetOpinion, < AG : I:Info >, < AG' : I':Info >)) = false if abs(opinion(
    I:Info) - opinion(I':Info)) > EPSILON = true .
SO:SetOpinion --> < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >
AG --> 0
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
AG' --> 1
I':Info --> ["o",1.0] ["g",-1.0]
consensus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 :
    ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >))
--->
false
*********** equation
eq not A:Bool = true xor A:Bool .
A:Bool --> false
not false
--->
true xor false
*********** equation
eq false xor A:Bool = A:Bool .
A:Bool --> true
true xor false
--->
true
*********** success for condition fragment
not consensus(STATE) = true
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE':SetEdge --> (unbound)
SSE:SetSetEdge --> (unbound)
STATE' --> (unbound)
*********** solving condition fragment
SETEDGE':SetEdge ; SSE:SetSetEdge := strategy(edges(STATE), STATE)
*********** equation
eq edges(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = SE .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
edges(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
*********** equation
eq strategy(SE, STATE) = i-e(SE, steps(STATE) + comm(STATE)) .
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
strategy((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >), < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
i-e((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >,
    <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >),
    steps(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) + comm(< nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty))
*********** equation
eq steps(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = STEPS .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
steps(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
eq comm(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = COMM .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
(built-in equation for symbol _+_)
0 + 0
--->
0
*********** equation
eq i-e(SE, X) = selection-e(incidents(SE), SE, X) .
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
X --> 0
i-e((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >,
    <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >),
    0)
--->
selection-e(incidents((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0
    >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >)), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), 0)
*********** equation
eq incidents(SE) = $incidents(SE, empty) .
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
incidents((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >))
--->
$incidents((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >), empty)
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 0
AG' --> 1
W --> 1.0
SA --> (empty).SetAgent
$incidents((<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >), empty)
--->
$incidents((<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0):
    1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (1,
    empty))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 0
AG' --> 2
W --> 1.0
SA --> 1
$incidents((<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0):
    1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), 1)
--->
$incidents((<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1):
    1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (2, 1))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0
    >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 0
AG' --> 3
W --> 1.0
SA --> 1, 2
$incidents((<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1):
    1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (1, 2))
--->
$incidents((<(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3):
    1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (3, 1, 2))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0
    >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 1
AG' --> 0
W --> 1.0
SA --> 1, 2, 3
$incidents((<(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3):
    1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (1, 2, 3))
--->
$incidents((<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0):
    1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >
AG --> 1
AG' --> 2
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0):
    1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
--->
$incidents((<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), (2, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 2
0, 1, 2, 2, 3
--->
(0, 1, 3), 2
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 1
AG' --> 3
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
--->
$incidents((<(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >), (3, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 3
0, 1, 2, 3, 3
--->
(0, 1, 2), 3
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 2
AG' --> 0
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 >), (0, 1, 2, 3))
--->
$incidents((<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 0,
    1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 0
0, 0, 1, 2, 3
--->
(1, 2, 3), 0
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 2
AG' --> 1
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1,
    2, 3))
--->
$incidents((<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (1, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 1
0, 1, 1, 2, 3
--->
(0, 2, 3), 1
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 2
AG' --> 3
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
--->
$incidents((<(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (3, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 3
0, 1, 2, 3, 3
--->
(0, 1, 2), 3
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(3,1): 1.0 >, <(3,2): 1.0 >
AG --> 3
AG' --> 0
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
--->
$incidents((<(3,1): 1.0 >, <(3,2): 1.0 >), (0, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 0
0, 0, 1, 2, 3
--->
(1, 2, 3), 0
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(3,2): 1.0 >
AG --> 3
AG' --> 1
W --> 1.0
SA --> 0, 1, 2, 3
$incidents((<(3,1): 1.0 >, <(3,2): 1.0 >), (0, 1, 2, 3))
--->
$incidents(<(3,2): 1.0 >, (1, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 1
0, 1, 1, 2, 3
--->
(0, 2, 3), 1
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> (empty).SetEdge
AG --> 3
AG' --> 2
W --> 1.0
SA --> 0, 1, 2, 3
$incidents(<(3,2): 1.0 >, (0, 1, 2, 3))
--->
$incidents(empty, (2, 0, 1, 2, 3))
*********** equation
eq N:NeSetAgent, N:NeSetAgent = N:NeSetAgent .
N:NeSetAgent --> 2
0, 1, 2, 2, 3
--->
(0, 1, 3), 2
*********** equation
eq $incidents(empty, SA) = SA .
SA --> 0, 1, 2, 3
$incidents(empty, (0, 1, 2, 3))
--->
0, 1, 2, 3
*********** equation
eq selection-e(SA, SE, X) = selection-e(SA, SE, empty, X) .
SA --> 0, 1, 2, 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
X --> 0
selection-e((0, 1, 2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), 0)
--->
selection-e((0, 1, 2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), empty, 0)
*********** equation
eq selection-e((AG, SA), SE, SE', X) = selection-e(SA, SE, (SE', randomPick(influence2(AG, SE),
    X)), X + 1) .
AG --> 0
SA --> 1, 2, 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
SE' --> (empty).SetEdge
X --> 0
selection-e((0, 1, 2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 >), empty, 0)
--->
selection-e((1, 2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0
    >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >), (empty, randomPick(influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3):
    1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3):
    1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >)), 0)), 0 + 1)
*********** equation
eq influence2(AG, SE) = influence2(AG, SE, empty) .
AG --> 0
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >))
--->
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 0
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
W --> 1.0
SE' --> (empty).SetEdge
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
--->
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (
    empty, <(1,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 0
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
W --> 1.0
SE' --> <(1,0): 1.0 >
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), <(1,
    0): 1.0 >)
--->
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(
    2,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 0
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 3
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(
    2,0): 1.0 >))
--->
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), ((<(1,0): 1.0 >, <(2,0): 1.0 >),
    <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0
    >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 1
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(
    3,0): 1.0 >))
--->
influence2(0, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,
    3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 2
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,
    3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,
    1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 3
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,
    1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, (<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 2
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, (<(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(
    1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 3
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(1,3): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(
    1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, (<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(
    2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 1
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(
    2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, (<(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(
    3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 3
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(2,3): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(
    3,0): 1.0 >))
--->
influence2(0, (<(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> <(3,2): 1.0 >
AG' --> 3
AG'' --> 1
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, (<(3,1): 1.0 >, <(3,2): 1.0 >), (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, <(3,2): 1.0 >, (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 0
SE --> (empty).SetEdge
AG' --> 3
AG'' --> 2
W --> 1.0
SE' --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, <(3,2): 1.0 >, (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
influence2(0, empty, (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
*********** equation
eq influence2(AG, empty, SE) = SE .
AG --> 0
SE --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
influence2(0, empty, (<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >))
--->
<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
*********** equation
eq randomPick(SE, X) = selectElement(SE, genRandom(0, | SE | - 1, X)) .
SE --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
X --> 0
randomPick((<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >), 0)
--->
selectElement((<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >), genRandom(0, | <(1,0): 1.0 >, <(2,
    0): 1.0 >, <(3,0): 1.0 > | - 1, 0))
*********** equation
eq | S:SetEdge | = $card(S:SetEdge, 0) .
S:SetEdge --> <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >
| <(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 > |
--->
$card((<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >), 0)
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(2,0): 1.0 >, <(3,0): 1.0 >
E --> <(1,0): 1.0 >
C:Nat --> 0
$card((<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >), 0)
--->
$card((<(2,0): 1.0 >, <(3,0): 1.0 >), 0 + 1)
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(3,0): 1.0 >
E --> <(2,0): 1.0 >
C:Nat --> 1
$card((<(2,0): 1.0 >, <(3,0): 1.0 >), 1)
--->
$card(<(3,0): 1.0 >, 1 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> (empty).SetEdge
E --> <(3,0): 1.0 >
C:Nat --> 2
$card(<(3,0): 1.0 >, 2)
--->
$card((empty).SetEdge, 2 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq $card((empty).SetEdge, C:Nat) = C:Nat .
C:Nat --> 3
$card((empty).SetEdge, 3)
--->
3
*********** equation
(built-in equation for symbol _-_)
3 - 1
--->
2
*********** equation
eq genRandom(Min1, Max1, X) = Min1 + rand(X) rem (1 + (Max1 - Min1)) .
Min1 --> 0
Max1 --> 2
X --> 0
genRandom(0, 2, 0)
--->
0 + rand(0) rem (1 + (2 - 0))
*********** equation
eq rand(X) = random(X + 41723) .
X --> 0
rand(0)
--->
random(0 + 41723)
*********** equation
(built-in equation for symbol _+_)
0 + 41723
--->
41723
*********** equation
(built-in equation for symbol random)
random(41723)
--->
978374969
*********** equation
(built-in equation for symbol _-_)
2 - 0
--->
2
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
(built-in equation for symbol _rem_)
978374969 rem 3
--->
2
*********** equation
(built-in equation for symbol _+_)
0 + 2
--->
2
*********** equation
eq selectElement((SE, E), s X) = selectElement(SE, X) .
SE --> <(2,0): 1.0 >, <(3,0): 1.0 >
E --> <(1,0): 1.0 >
X --> 1
selectElement((<(1,0): 1.0 >, <(2,0): 1.0 >, <(3,0): 1.0 >), 2)
--->
selectElement((<(2,0): 1.0 >, <(3,0): 1.0 >), 1)
*********** equation
eq selectElement((SE, E), s X) = selectElement(SE, X) .
SE --> <(3,0): 1.0 >
E --> <(2,0): 1.0 >
X --> 0
selectElement((<(2,0): 1.0 >, <(3,0): 1.0 >), 1)
--->
selectElement(<(3,0): 1.0 >, 0)
*********** equation
eq selectElement((SE, E), 0) = E .
SE --> (empty).SetEdge
E --> <(3,0): 1.0 >
selectElement(<(3,0): 1.0 >, 0)
--->
<(3,0): 1.0 >
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq selection-e((AG, SA), SE, SE', X) = selection-e(SA, SE, (SE', randomPick(influence2(AG, SE),
    X)), X + 1) .
AG --> 1
SA --> 2, 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
SE' --> <(3,0): 1.0 >
X --> 1
selection-e((1, 2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0
    >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >), <(3,0): 1.0 >, 1)
--->
selection-e((2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 >), (<(3,0): 1.0 >, randomPick(influence2(1, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(
    0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(
    2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >)), 1)), 1 + 1)
*********** equation
eq influence2(AG, SE) = influence2(AG, SE, empty) .
AG --> 1
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
influence2(1, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >))
--->
influence2(1, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 1
SE --> <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
W --> 1.0
SE' --> (empty).SetEdge
influence2(1, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
--->
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (
    empty, <(0,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 1
SE --> <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
W --> 1.0
SE' --> <(0,1): 1.0 >
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), <(0,
    1): 1.0 >)
--->
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(
    2,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 1
SE --> <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 3
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(
    2,1): 1.0 >))
--->
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), ((<(0,1): 1.0 >, <(2,1): 1.0 >),
    <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0
    >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 2
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(
    3,1): 1.0 >))
--->
influence2(1, (<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0
    >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 3
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, (<(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,
    0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 0
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,
    0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, (<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,
    2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 2
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,
    2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, (<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(
    0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 3
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(
    0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, (<(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(
    2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 0
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(2,0): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(
    2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, (<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(
    3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(3,0): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 3
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(
    3,1): 1.0 >))
--->
influence2(1, (<(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> <(3,2): 1.0 >
AG' --> 3
AG'' --> 0
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, (<(3,0): 1.0 >, <(3,2): 1.0 >), (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, <(3,2): 1.0 >, (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 1
SE --> (empty).SetEdge
AG' --> 3
AG'' --> 2
W --> 1.0
SE' --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, <(3,2): 1.0 >, (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
influence2(1, empty, (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
*********** equation
eq influence2(AG, empty, SE) = SE .
AG --> 1
SE --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
influence2(1, empty, (<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >))
--->
<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
*********** equation
eq randomPick(SE, X) = selectElement(SE, genRandom(0, | SE | - 1, X)) .
SE --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
X --> 1
randomPick((<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >), 1)
--->
selectElement((<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >), genRandom(0, | <(0,1): 1.0 >, <(2,
    1): 1.0 >, <(3,1): 1.0 > | - 1, 1))
*********** equation
eq | S:SetEdge | = $card(S:SetEdge, 0) .
S:SetEdge --> <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >
| <(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 > |
--->
$card((<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >), 0)
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(2,1): 1.0 >, <(3,1): 1.0 >
E --> <(0,1): 1.0 >
C:Nat --> 0
$card((<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >), 0)
--->
$card((<(2,1): 1.0 >, <(3,1): 1.0 >), 0 + 1)
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(3,1): 1.0 >
E --> <(2,1): 1.0 >
C:Nat --> 1
$card((<(2,1): 1.0 >, <(3,1): 1.0 >), 1)
--->
$card(<(3,1): 1.0 >, 1 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> (empty).SetEdge
E --> <(3,1): 1.0 >
C:Nat --> 2
$card(<(3,1): 1.0 >, 2)
--->
$card((empty).SetEdge, 2 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq $card((empty).SetEdge, C:Nat) = C:Nat .
C:Nat --> 3
$card((empty).SetEdge, 3)
--->
3
*********** equation
(built-in equation for symbol _-_)
3 - 1
--->
2
*********** equation
eq genRandom(Min1, Max1, X) = Min1 + rand(X) rem (1 + (Max1 - Min1)) .
Min1 --> 0
Max1 --> 2
X --> 1
genRandom(0, 2, 1)
--->
0 + rand(1) rem (1 + (2 - 0))
*********** equation
eq rand(X) = random(X + 41723) .
X --> 1
rand(1)
--->
random(1 + 41723)
*********** equation
(built-in equation for symbol _+_)
1 + 41723
--->
41724
*********** equation
(built-in equation for symbol random)
random(41724)
--->
655260502
*********** equation
(built-in equation for symbol _-_)
2 - 0
--->
2
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
(built-in equation for symbol _rem_)
655260502 rem 3
--->
1
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq selectElement((SE, E), s X) = selectElement(SE, X) .
SE --> <(2,1): 1.0 >, <(3,1): 1.0 >
E --> <(0,1): 1.0 >
X --> 0
selectElement((<(0,1): 1.0 >, <(2,1): 1.0 >, <(3,1): 1.0 >), 1)
--->
selectElement((<(2,1): 1.0 >, <(3,1): 1.0 >), 0)
*********** equation
eq selectElement((SE, E), 0) = E .
SE --> <(3,1): 1.0 >
E --> <(2,1): 1.0 >
selectElement((<(2,1): 1.0 >, <(3,1): 1.0 >), 0)
--->
<(2,1): 1.0 >
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq selection-e((AG, SA), SE, SE', X) = selection-e(SA, SE, (SE', randomPick(influence2(AG, SE),
    X)), X + 1) .
AG --> 2
SA --> 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
SE' --> <(2,1): 1.0 >, <(3,0): 1.0 >
X --> 2
selection-e((2, 3), (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 >), (<(2,1): 1.0 >, <(3,0): 1.0 >), 2)
--->
selection-e(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), ((<(2,1): 1.0 >, <(3,0): 1.0 >), randomPick(influence2(2, (<(0,1): 1.0 >, <(0,
    2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >)), 2)), 2 + 1)
*********** equation
eq influence2(AG, SE) = influence2(AG, SE, empty) .
AG --> 2
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >))
--->
influence2(2, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 2
SE --> <(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
W --> 1.0
SE' --> (empty).SetEdge
influence2(2, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
--->
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (
    empty, <(0,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 2
SE --> <(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
W --> 1.0
SE' --> <(0,2): 1.0 >
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), <(0,
    2): 1.0 >)
--->
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,2): 1.0 >, <(
    1,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 2
SE --> <(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 3
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,2): 1.0 >, <(
    1,2): 1.0 >))
--->
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), ((<(0,2): 1.0 >, <(1,2): 1.0 >),
    <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0
    >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 0
AG'' --> 1
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(0,1): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(
    3,2): 1.0 >))
--->
influence2(2, (<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,
    3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0
    >, <(3,1): 1.0 >
AG' --> 0
AG'' --> 3
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(0,3): 1.0 >, <(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,
    3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, (<(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,
    0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 1
AG'' --> 0
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(1,0): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,
    0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, (<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,
    1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 1
AG'' --> 3
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,
    1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, (<(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(
    0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 2
AG'' --> 0
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(
    0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, (<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(
    1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 2
AG'' --> 1
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(
    1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, (<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(
    3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(3,0): 1.0 >, <(3,1): 1.0 >
AG' --> 2
AG'' --> 3
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(
    3,2): 1.0 >))
--->
influence2(2, (<(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> <(3,1): 1.0 >
AG' --> 3
AG'' --> 0
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, (<(3,0): 1.0 >, <(3,1): 1.0 >), (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, <(3,1): 1.0 >, (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 2
SE --> (empty).SetEdge
AG' --> 3
AG'' --> 1
W --> 1.0
SE' --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, <(3,1): 1.0 >, (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
influence2(2, empty, (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
*********** equation
eq influence2(AG, empty, SE) = SE .
AG --> 2
SE --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
influence2(2, empty, (<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >))
--->
<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
*********** equation
eq randomPick(SE, X) = selectElement(SE, genRandom(0, | SE | - 1, X)) .
SE --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
X --> 2
randomPick((<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >), 2)
--->
selectElement((<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >), genRandom(0, | <(0,2): 1.0 >, <(1,
    2): 1.0 >, <(3,2): 1.0 > | - 1, 2))
*********** equation
eq | S:SetEdge | = $card(S:SetEdge, 0) .
S:SetEdge --> <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >
| <(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 > |
--->
$card((<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >), 0)
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(1,2): 1.0 >, <(3,2): 1.0 >
E --> <(0,2): 1.0 >
C:Nat --> 0
$card((<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >), 0)
--->
$card((<(1,2): 1.0 >, <(3,2): 1.0 >), 0 + 1)
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(3,2): 1.0 >
E --> <(1,2): 1.0 >
C:Nat --> 1
$card((<(1,2): 1.0 >, <(3,2): 1.0 >), 1)
--->
$card(<(3,2): 1.0 >, 1 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> (empty).SetEdge
E --> <(3,2): 1.0 >
C:Nat --> 2
$card(<(3,2): 1.0 >, 2)
--->
$card((empty).SetEdge, 2 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq $card((empty).SetEdge, C:Nat) = C:Nat .
C:Nat --> 3
$card((empty).SetEdge, 3)
--->
3
*********** equation
(built-in equation for symbol _-_)
3 - 1
--->
2
*********** equation
eq genRandom(Min1, Max1, X) = Min1 + rand(X) rem (1 + (Max1 - Min1)) .
Min1 --> 0
Max1 --> 2
X --> 2
genRandom(0, 2, 2)
--->
0 + rand(2) rem (1 + (2 - 0))
*********** equation
eq rand(X) = random(X + 41723) .
X --> 2
rand(2)
--->
random(2 + 41723)
*********** equation
(built-in equation for symbol _+_)
2 + 41723
--->
41725
*********** equation
(built-in equation for symbol random)
random(41725)
--->
252666067
*********** equation
(built-in equation for symbol _-_)
2 - 0
--->
2
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
(built-in equation for symbol _rem_)
252666067 rem 3
--->
1
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq selectElement((SE, E), s X) = selectElement(SE, X) .
SE --> <(1,2): 1.0 >, <(3,2): 1.0 >
E --> <(0,2): 1.0 >
X --> 0
selectElement((<(0,2): 1.0 >, <(1,2): 1.0 >, <(3,2): 1.0 >), 1)
--->
selectElement((<(1,2): 1.0 >, <(3,2): 1.0 >), 0)
*********** equation
eq selectElement((SE, E), 0) = E .
SE --> <(3,2): 1.0 >
E --> <(1,2): 1.0 >
selectElement((<(1,2): 1.0 >, <(3,2): 1.0 >), 0)
--->
<(1,2): 1.0 >
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq selection-e((AG, SA), SE, SE', X) = selection-e(SA, SE, (SE', randomPick(influence2(AG, SE),
    X)), X + 1) .
AG --> 3
SA --> (empty).SetAgent
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
SE' --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
X --> 3
selection-e(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), (<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 3)
--->
selection-e(empty, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 >), ((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), randomPick(influence2(3, (
    <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >,
    <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >)),
    3)), 3 + 1)
*********** equation
eq influence2(AG, SE) = influence2(AG, SE, empty) .
AG --> 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >))
--->
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0
    >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
W --> 1.0
SE' --> (empty).SetEdge
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), empty)
--->
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (
    empty, <(0,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0
    >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
W --> 1.0
SE' --> <(0,3): 1.0 >
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), <(0,
    3): 1.0 >)
--->
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(
    1,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG): W >), SE') = influence2(AG, SE, (SE', <(AG',AG): W >)) .
AG --> 3
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(
    1,3): 1.0 >))
--->
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), ((<(0,3): 1.0 >, <(1,3): 1.0 >),
    <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0
    >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 1
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,
    1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(
    2,3): 1.0 >))
--->
influence2(3, (<(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,
    0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0
    >, <(3,2): 1.0 >
AG' --> 0
AG'' --> 2
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(0,2): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,
    0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, (<(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,
    1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 0
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(1,0): 1.0 >, <(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,
    1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, (<(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 1
AG'' --> 2
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(1,2): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, (<(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(
    0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 0
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(2,0): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(
    0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, (<(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(
    1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 2
AG'' --> 1
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(2,1): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(
    1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, (<(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(
    2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(3,1): 1.0 >, <(3,2): 1.0 >
AG' --> 3
AG'' --> 0
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(
    2,3): 1.0 >))
--->
influence2(3, (<(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> <(3,2): 1.0 >
AG' --> 3
AG'' --> 1
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, (<(3,1): 1.0 >, <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, <(3,2): 1.0 >, (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, (SE, <(AG',AG''): W >), SE') = influence2(AG, SE, SE') [owise] .
AG --> 3
SE --> (empty).SetEdge
AG' --> 3
AG'' --> 2
W --> 1.0
SE' --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, <(3,2): 1.0 >, (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
influence2(3, empty, (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
*********** equation
eq influence2(AG, empty, SE) = SE .
AG --> 3
SE --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
influence2(3, empty, (<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >))
--->
<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
*********** equation
eq randomPick(SE, X) = selectElement(SE, genRandom(0, | SE | - 1, X)) .
SE --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
X --> 3
randomPick((<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >), 3)
--->
selectElement((<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >), genRandom(0, | <(0,3): 1.0 >, <(1,
    3): 1.0 >, <(2,3): 1.0 > | - 1, 3))
*********** equation
eq | S:SetEdge | = $card(S:SetEdge, 0) .
S:SetEdge --> <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >
| <(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 > |
--->
$card((<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >), 0)
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(1,3): 1.0 >, <(2,3): 1.0 >
E --> <(0,3): 1.0 >
C:Nat --> 0
$card((<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >), 0)
--->
$card((<(1,3): 1.0 >, <(2,3): 1.0 >), 0 + 1)
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(2,3): 1.0 >
E --> <(1,3): 1.0 >
C:Nat --> 1
$card((<(1,3): 1.0 >, <(2,3): 1.0 >), 1)
--->
$card(<(2,3): 1.0 >, 1 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> (empty).SetEdge
E --> <(2,3): 1.0 >
C:Nat --> 2
$card(<(2,3): 1.0 >, 2)
--->
$card((empty).SetEdge, 2 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq $card((empty).SetEdge, C:Nat) = C:Nat .
C:Nat --> 3
$card((empty).SetEdge, 3)
--->
3
*********** equation
(built-in equation for symbol _-_)
3 - 1
--->
2
*********** equation
eq genRandom(Min1, Max1, X) = Min1 + rand(X) rem (1 + (Max1 - Min1)) .
Min1 --> 0
Max1 --> 2
X --> 3
genRandom(0, 2, 3)
--->
0 + rand(3) rem (1 + (2 - 0))
*********** equation
eq rand(X) = random(X + 41723) .
X --> 3
rand(3)
--->
random(3 + 41723)
*********** equation
(built-in equation for symbol _+_)
3 + 41723
--->
41726
*********** equation
(built-in equation for symbol random)
random(41726)
--->
4060813563
*********** equation
(built-in equation for symbol _-_)
2 - 0
--->
2
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
(built-in equation for symbol _rem_)
4060813563 rem 3
--->
0
*********** equation
(built-in equation for symbol _+_)
0 + 0
--->
0
*********** equation
eq selectElement((SE, E), 0) = E .
SE --> <(1,3): 1.0 >, <(2,3): 1.0 >
E --> <(0,3): 1.0 >
selectElement((<(0,3): 1.0 >, <(1,3): 1.0 >, <(2,3): 1.0 >), 0)
--->
<(0,3): 1.0 >
*********** equation
(built-in equation for symbol _+_)
1 + 3
--->
4
*********** equation
eq selection-e(empty, SE, SE', X) = SE' .
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
SE' --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
X --> 4
selection-e(empty, (<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 >), (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 4)
--->
<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** success for condition fragment
SETEDGE':SetEdge ; SSE:SetSetEdge := strategy(edges(STATE), STATE)
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE':SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
SSE:SetSetEdge --> mt
STATE' --> (unbound)
*********** solving condition fragment
STATE' := step([moduleName], STATE, SETEDGE':SetEdge)
*********** equation
eq moduleName = 'TEST .
empty substitution
moduleName
--->
'TEST
*********** equation
eq [Q:Qid] = sth Q:Qid is
  including Q:Qid .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth .
Q:Qid --> 'TEST
['TEST]
--->
sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
*********** equation
eq step(M:Module, STATE, EDGES) = step(M:Module, STATE, incidents(EDGES), empty, EDGES) .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >))
--->
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, incidents((<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >)), empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,
    0): 1.0 >))
*********** equation
eq incidents(SE) = $incidents(SE, empty) .
SE --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
incidents((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
$incidents((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), empty)
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 0
AG' --> 3
W --> 1.0
SA --> (empty).SetAgent
$incidents((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), empty)
--->
$incidents((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), (3, empty))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 1
AG' --> 2
W --> 1.0
SA --> 3
$incidents((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 3)
--->
$incidents((<(2,1): 1.0 >, <(3,0): 1.0 >), (2, 3))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> <(3,0): 1.0 >
AG --> 2
AG' --> 1
W --> 1.0
SA --> 2, 3
$incidents((<(2,1): 1.0 >, <(3,0): 1.0 >), (2, 3))
--->
$incidents(<(3,0): 1.0 >, (1, 2, 3))
*********** equation
eq $incidents((SE, <(AG,AG'): W >), SA) = $incidents(SE, (AG', SA)) .
SE --> (empty).SetEdge
AG --> 3
AG' --> 0
W --> 1.0
SA --> 1, 2, 3
$incidents(<(3,0): 1.0 >, (1, 2, 3))
--->
$incidents(empty, (0, 1, 2, 3))
*********** equation
eq $incidents(empty, SA) = SA .
SA --> 0, 1, 2, 3
$incidents(empty, (0, 1, 2, 3))
--->
0, 1, 2, 3
*********** equation
eq step(M:Module, STATE, (AG, SETAG:SetAgent), SO:SetOpinion, EDGES) = step(M:Module, STATE,
    SETAG:SetAgent, (SO:SetOpinion, next(M:Module, AG, EDGES, STATE)), EDGES) .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG --> 0
SETAG:SetAgent --> 1, 2, 3
SO:SetOpinion --> (empty).SetOpinion
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (0, 1, 2, 3), empty, (<(0,3): 1.0 >, <(1,
    2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (1, 2, 3), (empty, next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 0, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)), (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(
    3,0): 1.0 >))
*********** trial #4
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 0
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution --> (unbound)
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
*********** equation
(built-in equation for symbol upTerm)
upTerm(0)
--->
'0.Zero
*********** equation
eq information(AG, < nodes: SN, < AG : I:Info > ; edges: SE > in step: STEPS comm: COMM strat:
    EDGES) = I:Info .
AG --> 0
SN --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : [
    "o",-9.0000000000000002e-1] ["g",1.0] >
I:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
information(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
["o",-1.0000000000000001e-1] ["g",1.0]
*********** equation
(built-in equation for symbol upTerm)
upTerm(["o",-1.0000000000000001e-1] ["g",1.0])
--->
'__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
'_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'s_^2[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
'_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,
    '-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,'1.0.FiniteFloat]]],'<_:_>['s_[
    '0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
*********** success for condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 0
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- '0.Zero ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
*********** equation
(built-in equation for symbol upTerm)
upTerm(< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >)
--->
'<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]]]
*********** trial #5
crl < AGENT:Agent : BELIEF:Info > => < AGENT:Agent : BELIEF':Info > if BELIEF':Info := update(
    STATE:State, EDGES:SetEdge, AGENT:Agent) [nonexec label atomic] .
AGENT:Agent --> 0
BELIEF:Info --> ["o",-1.0000000000000001e-1] ["g",1.0]
BELIEF':Info --> (unbound)
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
EDGES:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** solving condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** equation
eq update(STATE:State, SETEDGE:SetEdge, AG:Agent) = update-i-e(STATE:State, SETEDGE:SetEdge,
    AG:Agent) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 0
update(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >,
    <(3,0): 1.0 >), 0)
--->
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 0)
*********** equation
eq update-i-e(NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge,
    SETEDGE:SetEdge, AG:Agent) = ["o",interaction-e(NETWORK:Network in step: STEPS:Nat comm:
    COMM:Nat strat: EDGES:SetEdge, AG:Agent, SETEDGE:SetEdge, paramS, paramHo, paramHs)] ["g",
    float(group(AG:Agent, NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge))] .
NETWORK:Network --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 0
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 0)
--->
["o",interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 0, (<(0,3):
    1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), paramS, paramHo, paramHs)] ["g",float(
    group(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty))]
*********** equation
eq paramS = 2 .
empty substitution
paramS
--->
2
*********** equation
eq paramHo = 3.0 .
empty substitution
paramHo
--->
3.0
*********** equation
eq paramHs = 4.0 .
empty substitution
paramHs
--->
4.0
*********** equation
eq interaction-e(STATE:State, AG:Agent, (SE:SetEdge, <(AG':Agent,AG:Agent): W:Float >), S:Nat,
    ho:Float, hp:Float) = truncatingFunct(opinion(AG:Agent, STATE:State) + computeOpAdj(comm(
    STATE:State), opinion(AG':Agent, STATE:State), opinion(AG:Agent, STATE:State), S:Nat) *
    computeSimilarity(group(AG:Agent, STATE:State), opinion(AG:Agent, STATE:State), group(
    AG':Agent, STATE:State), opinion(AG':Agent, STATE:State), ho:Float) ^ hp:Float) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG:Agent --> 0
SE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >
AG':Agent --> 3
W:Float --> 1.0
S:Nat --> 2
ho:Float --> 3.0
hp:Float --> 4.0
interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 0, (<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >), 2, 3.0, 4.0)
--->
truncatingFunct(opinion(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",
    1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) +
    computeOpAdj(comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0]
    ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty), opinion(3,
    < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(0, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 2) * computeSimilarity(group(0, < nodes: < 0 : [
    "o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(0, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), group(3, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(3, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 3.0) ^ 4.0)
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 0
SN:SetOpinion --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> -1.0000000000000001e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
-1.0000000000000001e-1
*********** equation
eq comm(< nodes: SN:SetOpinion ; edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge) = COMM:Nat .
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 3
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >
ST:String --> "o"
F:Float --> -9.0000000000000002e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
-9.0000000000000002e-1
*********** equation
eq computeOpAdj(X:Nat, oj:Float, oi:Float, S:Nat) = computeOpAdj(oj:Float, oi:Float, S:Nat,
    randFloat(X:Nat)) .
X:Nat --> 0
oj:Float --> -9.0000000000000002e-1
oi:Float --> -1.0000000000000001e-1
S:Nat --> 2
computeOpAdj(0, -9.0000000000000002e-1, -1.0000000000000001e-1, 2)
--->
computeOpAdj(-9.0000000000000002e-1, -1.0000000000000001e-1, 2, randFloat(0))
*********** equation
eq randFloat(X:Nat) = float(random(X:Nat + 10322) / 4294967296) .
X:Nat --> 0
randFloat(0)
--->
float(random(0 + 10322) / 4294967296)
*********** equation
(built-in equation for symbol _+_)
0 + 10322
--->
10322
*********** equation
(built-in equation for symbol random)
random(10322)
--->
1527609184
*********** equation
(built-in equation for symbol _/_)
1527609184/4294967296
--->
47737787/134217728
*********** equation
(built-in equation for symbol float)
float(47737787/134217728)
--->
3.5567422956228256e-1
*********** equation
eq computeOpAdj(oj:Float, oi:Float, S:Nat, R:Float) = computeOpAdj(R:Float < computeProb(
    oj:Float), R:Float < computeProb(oi:Float), S:Nat) .
oj:Float --> -9.0000000000000002e-1
oi:Float --> -1.0000000000000001e-1
S:Nat --> 2
R:Float --> 3.5567422956228256e-1
computeOpAdj(-9.0000000000000002e-1, -1.0000000000000001e-1, 2, 3.5567422956228256e-1)
--->
computeOpAdj(3.5567422956228256e-1 < computeProb(-9.0000000000000002e-1), 3.5567422956228256e-1
    < computeProb(-1.0000000000000001e-1), 2)
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> -9.0000000000000002e-1
computeProb(-9.0000000000000002e-1)
--->
5.0e-1 * (-9.0000000000000002e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
-9.0000000000000002e-1 + 1.0
--->
9.9999999999999978e-2
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 9.9999999999999978e-2
--->
4.9999999999999989e-2
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 4.9999999999999989e-2
--->
false
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> -1.0000000000000001e-1
computeProb(-1.0000000000000001e-1)
--->
5.0e-1 * (-1.0000000000000001e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
-1.0000000000000001e-1 + 1.0
--->
9.0000000000000002e-1
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 9.0000000000000002e-1
--->
4.5000000000000001e-1
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 4.5000000000000001e-1
--->
true
*********** equation
eq computeOpAdj(false, true, S:Nat) = -2.0 / float(S:Nat) .
S:Nat --> 2
computeOpAdj(false, true, 2)
--->
-2.0 / float(2)
*********** equation
(built-in equation for symbol float)
float(2)
--->
2.0
*********** equation
(built-in equation for symbol _/_)
-2.0 / 2.0
--->
-1.0
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 0
SN:SetOpinion --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> -1.0000000000000001e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-1.0000000000000001e-1)
*********** equation
(built-in equation for symbol rat)
rat(-1.0000000000000001e-1)
--->
-3602879701896397/36028797018963968
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 3
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >
ST:String --> "o"
F:Float --> -9.0000000000000002e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-9.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(-9.0000000000000002e-1)
--->
-8106479329266893/9007199254740992
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 0
SN:SetOpinion --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> -1.0000000000000001e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-1.0000000000000001e-1)
*********** equation
(built-in equation for symbol rat)
rat(-1.0000000000000001e-1)
--->
-3602879701896397/36028797018963968
*********** equation
(built-in equation for symbol float)
float(-3602879701896397/36028797018963968)
--->
-1.0000000000000001e-1
*********** failure for condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** failure #5
*********** equation
(built-in equation for symbol metaApply)
metaApply(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, '<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]]], 'atomic,
  'AGENT:Agent <- '0.Zero ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge], 0)
--->
(failure).ResultTriple?
*********** success for condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 0
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- '0.Zero ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> (unbound)
*********** solving condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
*********** equation
(built-in equation for symbol _==_)
(failure).ResultTriple? == (failure).ResultTriple?
--->
true
*********** equation
(built-in equation for symbol if_then_else_fi)
if true then error else downTerm(getTerm((failure).ResultTriple?), error) fi
--->
error
*********** success for condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 0
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- '0.Zero ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
*********** success #4
*********** equation
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 0
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- '0.Zero ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 0, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
error
*********** equation
eq step(M:Module, STATE, (AG, SETAG:SetAgent), SO:SetOpinion, EDGES) = step(M:Module, STATE,
    SETAG:SetAgent, (SO:SetOpinion, next(M:Module, AG, EDGES, STATE)), EDGES) .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG --> 1
SETAG:SetAgent --> 2, 3
SO:SetOpinion --> error
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (1, 2, 3), error, (<(0,3): 1.0 >, <(1,2):
    1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (2, 3), (error, next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 1, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)), (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(
    3,0): 1.0 >))
*********** trial #6
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 1
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution --> (unbound)
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
*********** equation
(built-in equation for symbol upTerm)
upTerm(1)
--->
's_['0.Zero]
*********** equation
eq information(AG, < nodes: SN, < AG : I:Info > ; edges: SE > in step: STEPS comm: COMM strat:
    EDGES) = I:Info .
AG --> 1
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",
    -1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
I:Info --> ["o",1.0] ["g",-1.0]
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
information(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
["o",1.0] ["g",-1.0]
*********** equation
(built-in equation for symbol upTerm)
upTerm(["o",1.0] ["g",-1.0])
--->
'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
'_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'s_^2[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
'_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,
    '-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,'1.0.FiniteFloat]]],'<_:_>['s_[
    '0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
*********** success for condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 1
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
*********** equation
(built-in equation for symbol upTerm)
upTerm(< 1 : ["o",1.0] ["g",-1.0] >)
--->
'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]]
*********** trial #7
crl < AGENT:Agent : BELIEF:Info > => < AGENT:Agent : BELIEF':Info > if BELIEF':Info := update(
    STATE:State, EDGES:SetEdge, AGENT:Agent) [nonexec label atomic] .
AGENT:Agent --> 1
BELIEF:Info --> ["o",1.0] ["g",-1.0]
BELIEF':Info --> (unbound)
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
EDGES:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** solving condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** equation
eq update(STATE:State, SETEDGE:SetEdge, AG:Agent) = update-i-e(STATE:State, SETEDGE:SetEdge,
    AG:Agent) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 1
update(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >,
    <(3,0): 1.0 >), 1)
--->
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 1)
*********** equation
eq update-i-e(NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge,
    SETEDGE:SetEdge, AG:Agent) = ["o",interaction-e(NETWORK:Network in step: STEPS:Nat comm:
    COMM:Nat strat: EDGES:SetEdge, AG:Agent, SETEDGE:SetEdge, paramS, paramHo, paramHs)] ["g",
    float(group(AG:Agent, NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge))] .
NETWORK:Network --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 1
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 1)
--->
["o",interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 1, (<(0,3):
    1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), paramS, paramHo, paramHs)] ["g",float(
    group(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty))]
*********** equation
eq paramS = 2 .
empty substitution
paramS
--->
2
*********** equation
eq paramHo = 3.0 .
empty substitution
paramHo
--->
3.0
*********** equation
eq paramHs = 4.0 .
empty substitution
paramHs
--->
4.0
*********** equation
eq interaction-e(STATE:State, AG:Agent, (SE:SetEdge, <(AG':Agent,AG:Agent): W:Float >), S:Nat,
    ho:Float, hp:Float) = truncatingFunct(opinion(AG:Agent, STATE:State) + computeOpAdj(comm(
    STATE:State), opinion(AG':Agent, STATE:State), opinion(AG:Agent, STATE:State), S:Nat) *
    computeSimilarity(group(AG:Agent, STATE:State), opinion(AG:Agent, STATE:State), group(
    AG':Agent, STATE:State), opinion(AG':Agent, STATE:State), ho:Float) ^ hp:Float) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG:Agent --> 1
SE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(3,0): 1.0 >
AG':Agent --> 2
W:Float --> 1.0
S:Nat --> 2
ho:Float --> 3.0
hp:Float --> 4.0
interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 1, (<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >), 2, 3.0, 4.0)
--->
truncatingFunct(opinion(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",
    1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) +
    computeOpAdj(comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0]
    ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty), opinion(2,
    < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(1, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 2) * computeSimilarity(group(1, < nodes: < 0 : [
    "o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(1, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), group(2, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(2, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 3.0) ^ 4.0)
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 1
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 1.0
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
1.0
*********** equation
eq comm(< nodes: SN:SetOpinion ; edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge) = COMM:Nat .
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 2
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 4.0000000000000002e-1
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
4.0000000000000002e-1
*********** equation
eq computeOpAdj(X:Nat, oj:Float, oi:Float, S:Nat) = computeOpAdj(oj:Float, oi:Float, S:Nat,
    randFloat(X:Nat)) .
X:Nat --> 0
oj:Float --> 4.0000000000000002e-1
oi:Float --> 1.0
S:Nat --> 2
computeOpAdj(0, 4.0000000000000002e-1, 1.0, 2)
--->
computeOpAdj(4.0000000000000002e-1, 1.0, 2, randFloat(0))
*********** equation
eq randFloat(X:Nat) = float(random(X:Nat + 10322) / 4294967296) .
X:Nat --> 0
randFloat(0)
--->
float(random(0 + 10322) / 4294967296)
*********** equation
(built-in equation for symbol _+_)
0 + 10322
--->
10322
*********** equation
(built-in equation for symbol random)
random(10322)
--->
1527609184
*********** equation
(built-in equation for symbol _/_)
1527609184/4294967296
--->
47737787/134217728
*********** equation
(built-in equation for symbol float)
float(47737787/134217728)
--->
3.5567422956228256e-1
*********** equation
eq computeOpAdj(oj:Float, oi:Float, S:Nat, R:Float) = computeOpAdj(R:Float < computeProb(
    oj:Float), R:Float < computeProb(oi:Float), S:Nat) .
oj:Float --> 4.0000000000000002e-1
oi:Float --> 1.0
S:Nat --> 2
R:Float --> 3.5567422956228256e-1
computeOpAdj(4.0000000000000002e-1, 1.0, 2, 3.5567422956228256e-1)
--->
computeOpAdj(3.5567422956228256e-1 < computeProb(4.0000000000000002e-1), 3.5567422956228256e-1
    < computeProb(1.0), 2)
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> 4.0000000000000002e-1
computeProb(4.0000000000000002e-1)
--->
5.0e-1 * (4.0000000000000002e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
4.0000000000000002e-1 + 1.0
--->
1.3999999999999999
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 1.3999999999999999
--->
6.9999999999999996e-1
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 6.9999999999999996e-1
--->
true
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> 1.0
computeProb(1.0)
--->
5.0e-1 * (1.0 + 1.0)
*********** equation
(built-in equation for symbol _+_)
1.0 + 1.0
--->
2.0
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 2.0
--->
1.0
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 1.0
--->
true
*********** equation
eq computeOpAdj(true, true, S:Nat) = 0.0 .
S:Nat --> 2
computeOpAdj(true, true, 2)
--->
0.0
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 1
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 1.0
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(1.0)
*********** equation
(built-in equation for symbol rat)
rat(1.0)
--->
1
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 2
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 4.0000000000000002e-1
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(4.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(4.0000000000000002e-1)
--->
3602879701896397/9007199254740992
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 1
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 1.0
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(1.0)
*********** equation
(built-in equation for symbol rat)
rat(1.0)
--->
1
*********** equation
(built-in equation for symbol float)
float(1)
--->
1.0
*********** failure for condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** failure #7
*********** equation
(built-in equation for symbol metaApply)
metaApply(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, '<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]], 'atomic,
  'AGENT:Agent <- 's_['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge], 0)
--->
(failure).ResultTriple?
*********** success for condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 1
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> (unbound)
*********** solving condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
*********** equation
(built-in equation for symbol _==_)
(failure).ResultTriple? == (failure).ResultTriple?
--->
true
*********** equation
(built-in equation for symbol if_then_else_fi)
if true then error else downTerm(getTerm((failure).ResultTriple?), error) fi
--->
error
*********** success for condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 1
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
*********** success #6
*********** equation
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 1
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 1, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
error
*********** equation
eq N:NeSetOpinion, N:NeSetOpinion = N:NeSetOpinion .
N:NeSetOpinion --> error
error, error
--->
error
*********** equation
eq step(M:Module, STATE, (AG, SETAG:SetAgent), SO:SetOpinion, EDGES) = step(M:Module, STATE,
    SETAG:SetAgent, (SO:SetOpinion, next(M:Module, AG, EDGES, STATE)), EDGES) .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG --> 2
SETAG:SetAgent --> 3
SO:SetOpinion --> error
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (2, 3), error, (<(0,3): 1.0 >, <(1,2): 1.0
    >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 3, (error, next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 2, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)), (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(
    3,0): 1.0 >))
*********** trial #8
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 2
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution --> (unbound)
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
*********** equation
(built-in equation for symbol upTerm)
upTerm(2)
--->
's_^2['0.Zero]
*********** equation
eq information(AG, < nodes: SN, < AG : I:Info > ; edges: SE > in step: STEPS comm: COMM strat:
    EDGES) = I:Info .
AG --> 2
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 3 : [
    "o",-9.0000000000000002e-1] ["g",1.0] >
I:Info --> ["o",4.0000000000000002e-1] ["g",-1.0]
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
information(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
["o",4.0000000000000002e-1] ["g",-1.0]
*********** equation
(built-in equation for symbol upTerm)
upTerm(["o",4.0000000000000002e-1] ["g",-1.0])
--->
'__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
'_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'s_^2[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
'_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,
    '-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,'1.0.FiniteFloat]]],'<_:_>['s_[
    '0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
*********** success for condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 2
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^2['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
*********** equation
(built-in equation for symbol upTerm)
upTerm(< 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >)
--->
'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]]]
*********** trial #9
crl < AGENT:Agent : BELIEF:Info > => < AGENT:Agent : BELIEF':Info > if BELIEF':Info := update(
    STATE:State, EDGES:SetEdge, AGENT:Agent) [nonexec label atomic] .
AGENT:Agent --> 2
BELIEF:Info --> ["o",4.0000000000000002e-1] ["g",-1.0]
BELIEF':Info --> (unbound)
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
EDGES:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** solving condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** equation
eq update(STATE:State, SETEDGE:SetEdge, AG:Agent) = update-i-e(STATE:State, SETEDGE:SetEdge,
    AG:Agent) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 2
update(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >,
    <(3,0): 1.0 >), 2)
--->
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 2)
*********** equation
eq update-i-e(NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge,
    SETEDGE:SetEdge, AG:Agent) = ["o",interaction-e(NETWORK:Network in step: STEPS:Nat comm:
    COMM:Nat strat: EDGES:SetEdge, AG:Agent, SETEDGE:SetEdge, paramS, paramHo, paramHs)] ["g",
    float(group(AG:Agent, NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge))] .
NETWORK:Network --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 2
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 2)
--->
["o",interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 2, (<(0,3):
    1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), paramS, paramHo, paramHs)] ["g",float(
    group(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty))]
*********** equation
eq paramS = 2 .
empty substitution
paramS
--->
2
*********** equation
eq paramHo = 3.0 .
empty substitution
paramHo
--->
3.0
*********** equation
eq paramHs = 4.0 .
empty substitution
paramHs
--->
4.0
*********** equation
eq interaction-e(STATE:State, AG:Agent, (SE:SetEdge, <(AG':Agent,AG:Agent): W:Float >), S:Nat,
    ho:Float, hp:Float) = truncatingFunct(opinion(AG:Agent, STATE:State) + computeOpAdj(comm(
    STATE:State), opinion(AG':Agent, STATE:State), opinion(AG:Agent, STATE:State), S:Nat) *
    computeSimilarity(group(AG:Agent, STATE:State), opinion(AG:Agent, STATE:State), group(
    AG':Agent, STATE:State), opinion(AG':Agent, STATE:State), ho:Float) ^ hp:Float) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG:Agent --> 2
SE:SetEdge --> <(0,3): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG':Agent --> 1
W:Float --> 1.0
S:Nat --> 2
ho:Float --> 3.0
hp:Float --> 4.0
interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 2, (<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >), 2, 3.0, 4.0)
--->
truncatingFunct(opinion(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",
    1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) +
    computeOpAdj(comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0]
    ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty), opinion(1,
    < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(2, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 2) * computeSimilarity(group(2, < nodes: < 0 : [
    "o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(2, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), group(1, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(1, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 3.0) ^ 4.0)
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 2
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 4.0000000000000002e-1
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
4.0000000000000002e-1
*********** equation
eq comm(< nodes: SN:SetOpinion ; edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge) = COMM:Nat .
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 1
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 1.0
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
1.0
*********** equation
eq computeOpAdj(X:Nat, oj:Float, oi:Float, S:Nat) = computeOpAdj(oj:Float, oi:Float, S:Nat,
    randFloat(X:Nat)) .
X:Nat --> 0
oj:Float --> 1.0
oi:Float --> 4.0000000000000002e-1
S:Nat --> 2
computeOpAdj(0, 1.0, 4.0000000000000002e-1, 2)
--->
computeOpAdj(1.0, 4.0000000000000002e-1, 2, randFloat(0))
*********** equation
eq randFloat(X:Nat) = float(random(X:Nat + 10322) / 4294967296) .
X:Nat --> 0
randFloat(0)
--->
float(random(0 + 10322) / 4294967296)
*********** equation
(built-in equation for symbol _+_)
0 + 10322
--->
10322
*********** equation
(built-in equation for symbol random)
random(10322)
--->
1527609184
*********** equation
(built-in equation for symbol _/_)
1527609184/4294967296
--->
47737787/134217728
*********** equation
(built-in equation for symbol float)
float(47737787/134217728)
--->
3.5567422956228256e-1
*********** equation
eq computeOpAdj(oj:Float, oi:Float, S:Nat, R:Float) = computeOpAdj(R:Float < computeProb(
    oj:Float), R:Float < computeProb(oi:Float), S:Nat) .
oj:Float --> 1.0
oi:Float --> 4.0000000000000002e-1
S:Nat --> 2
R:Float --> 3.5567422956228256e-1
computeOpAdj(1.0, 4.0000000000000002e-1, 2, 3.5567422956228256e-1)
--->
computeOpAdj(3.5567422956228256e-1 < computeProb(1.0), 3.5567422956228256e-1 < computeProb(
    4.0000000000000002e-1), 2)
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> 1.0
computeProb(1.0)
--->
5.0e-1 * (1.0 + 1.0)
*********** equation
(built-in equation for symbol _+_)
1.0 + 1.0
--->
2.0
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 2.0
--->
1.0
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 1.0
--->
true
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> 4.0000000000000002e-1
computeProb(4.0000000000000002e-1)
--->
5.0e-1 * (4.0000000000000002e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
4.0000000000000002e-1 + 1.0
--->
1.3999999999999999
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 1.3999999999999999
--->
6.9999999999999996e-1
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 6.9999999999999996e-1
--->
true
*********** equation
eq computeOpAdj(true, true, S:Nat) = 0.0 .
S:Nat --> 2
computeOpAdj(true, true, 2)
--->
0.0
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 2
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 4.0000000000000002e-1
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(4.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(4.0000000000000002e-1)
--->
3602879701896397/9007199254740992
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 1
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 1.0
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(1, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(1.0)
*********** equation
(built-in equation for symbol rat)
rat(1.0)
--->
1
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 2
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> 4.0000000000000002e-1
M:Memory --> ["g",-1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(2, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(4.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(4.0000000000000002e-1)
--->
3602879701896397/9007199254740992
*********** equation
(built-in equation for symbol float)
float(3602879701896397/9007199254740992)
--->
4.0000000000000002e-1
*********** failure for condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** failure #9
*********** equation
(built-in equation for symbol metaApply)
metaApply(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, '<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]], 'atomic,
  'AGENT:Agent <- 's_^2['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge], 0)
--->
(failure).ResultTriple?
*********** success for condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 2
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^2['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> (unbound)
*********** solving condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
*********** equation
(built-in equation for symbol _==_)
(failure).ResultTriple? == (failure).ResultTriple?
--->
true
*********** equation
(built-in equation for symbol if_then_else_fi)
if true then error else downTerm(getTerm((failure).ResultTriple?), error) fi
--->
error
*********** success for condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 2
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^2['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
*********** success #8
*********** equation
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 2
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^2['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'4.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'-1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 2, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
error
*********** equation
eq N:NeSetOpinion, N:NeSetOpinion = N:NeSetOpinion .
N:NeSetOpinion --> error
error, error
--->
error
*********** equation
eq step(M:Module, STATE, (AG, SETAG:SetAgent), SO:SetOpinion, EDGES) = step(M:Module, STATE,
    SETAG:SetAgent, (SO:SetOpinion, next(M:Module, AG, EDGES, STATE)), EDGES) .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG --> 3
SETAG:SetAgent --> (empty).SetAgent
SO:SetOpinion --> error
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 3, error, (<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, empty, (error, next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 3, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)), (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(
    3,0): 1.0 >))
*********** trial #10
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 3
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution --> (unbound)
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
*********** equation
(built-in equation for symbol upTerm)
upTerm(3)
--->
's_^3['0.Zero]
*********** equation
eq information(AG, < nodes: SN, < AG : I:Info > ; edges: SE > in step: STEPS comm: COMM strat:
    EDGES) = I:Info .
AG --> 3
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >
I:Info --> ["o",-9.0000000000000002e-1] ["g",1.0]
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
information(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
["o",-9.0000000000000002e-1] ["g",1.0]
*********** equation
(built-in equation for symbol upTerm)
upTerm(["o",-9.0000000000000002e-1] ["g",1.0])
--->
'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
'_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'s_^2[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]]
*********** equation
(built-in equation for symbol upTerm)
upTerm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
'_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__['`[_`,_`]['"o".Char,
    '-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,'1.0.FiniteFloat]]],'<_:_>['s_[
    '0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],'`[_`,_`]['"g".Char,
    '-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
*********** success for condition fragment
SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 3
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^3['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (unbound)
OP:Opinion --> (unbound)
*********** solving condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
*********** equation
(built-in equation for symbol upTerm)
upTerm(< 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >)
--->
'<_:_>['s_^3['0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]]]
*********** trial #11
crl < AGENT:Agent : BELIEF:Info > => < AGENT:Agent : BELIEF':Info > if BELIEF':Info := update(
    STATE:State, EDGES:SetEdge, AGENT:Agent) [nonexec label atomic] .
AGENT:Agent --> 3
BELIEF:Info --> ["o",-9.0000000000000002e-1] ["g",1.0]
BELIEF':Info --> (unbound)
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
EDGES:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** solving condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** equation
eq update(STATE:State, SETEDGE:SetEdge, AG:Agent) = update-i-e(STATE:State, SETEDGE:SetEdge,
    AG:Agent) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 3
update(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >,
    <(3,0): 1.0 >), 3)
--->
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 3)
*********** equation
eq update-i-e(NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge,
    SETEDGE:SetEdge, AG:Agent) = ["o",interaction-e(NETWORK:Network in step: STEPS:Nat comm:
    COMM:Nat strat: EDGES:SetEdge, AG:Agent, SETEDGE:SetEdge, paramS, paramHo, paramHs)] ["g",
    float(group(AG:Agent, NETWORK:Network in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge))] .
NETWORK:Network --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
SETEDGE:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG:Agent --> 3
update-i-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0
    >, <(3,0): 1.0 >), 3)
--->
["o",interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 3, (<(0,3):
    1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), paramS, paramHo, paramHs)] ["g",float(
    group(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty))]
*********** equation
eq paramS = 2 .
empty substitution
paramS
--->
2
*********** equation
eq paramHo = 3.0 .
empty substitution
paramHo
--->
3.0
*********** equation
eq paramHs = 4.0 .
empty substitution
paramHs
--->
4.0
*********** equation
eq interaction-e(STATE:State, AG:Agent, (SE:SetEdge, <(AG':Agent,AG:Agent): W:Float >), S:Nat,
    ho:Float, hp:Float) = truncatingFunct(opinion(AG:Agent, STATE:State) + computeOpAdj(comm(
    STATE:State), opinion(AG':Agent, STATE:State), opinion(AG:Agent, STATE:State), S:Nat) *
    computeSimilarity(group(AG:Agent, STATE:State), opinion(AG:Agent, STATE:State), group(
    AG':Agent, STATE:State), opinion(AG':Agent, STATE:State), ho:Float) ^ hp:Float) .
STATE:State --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
AG:Agent --> 3
SE:SetEdge --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG':Agent --> 0
W:Float --> 1.0
S:Nat --> 2
ho:Float --> 3.0
hp:Float --> 4.0
interaction-e(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, 3, (<(0,3): 1.0 >, <(1,2): 1.0 >,
    <(2,1): 1.0 >, <(3,0): 1.0 >), 2, 3.0, 4.0)
--->
truncatingFunct(opinion(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",
    1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) +
    computeOpAdj(comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0]
    ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >,
    <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >,
    <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty), opinion(0,
    < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(3, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 2) * computeSimilarity(group(3, < nodes: < 0 : [
    "o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(3, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), group(0, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), opinion(0, < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty), 3.0) ^ 4.0)
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 3
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >
ST:String --> "o"
F:Float --> -9.0000000000000002e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
-9.0000000000000002e-1
*********** equation
eq comm(< nodes: SN:SetOpinion ; edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat:
    EDGES:SetEdge) = COMM:Nat .
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
eq opinion(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ;
    edges: SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = F:Float .
AG:Agent --> 0
SN:SetOpinion --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> -1.0000000000000001e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
opinion(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
-1.0000000000000001e-1
*********** equation
eq computeOpAdj(X:Nat, oj:Float, oi:Float, S:Nat) = computeOpAdj(oj:Float, oi:Float, S:Nat,
    randFloat(X:Nat)) .
X:Nat --> 0
oj:Float --> -1.0000000000000001e-1
oi:Float --> -9.0000000000000002e-1
S:Nat --> 2
computeOpAdj(0, -1.0000000000000001e-1, -9.0000000000000002e-1, 2)
--->
computeOpAdj(-1.0000000000000001e-1, -9.0000000000000002e-1, 2, randFloat(0))
*********** equation
eq randFloat(X:Nat) = float(random(X:Nat + 10322) / 4294967296) .
X:Nat --> 0
randFloat(0)
--->
float(random(0 + 10322) / 4294967296)
*********** equation
(built-in equation for symbol _+_)
0 + 10322
--->
10322
*********** equation
(built-in equation for symbol random)
random(10322)
--->
1527609184
*********** equation
(built-in equation for symbol _/_)
1527609184/4294967296
--->
47737787/134217728
*********** equation
(built-in equation for symbol float)
float(47737787/134217728)
--->
3.5567422956228256e-1
*********** equation
eq computeOpAdj(oj:Float, oi:Float, S:Nat, R:Float) = computeOpAdj(R:Float < computeProb(
    oj:Float), R:Float < computeProb(oi:Float), S:Nat) .
oj:Float --> -1.0000000000000001e-1
oi:Float --> -9.0000000000000002e-1
S:Nat --> 2
R:Float --> 3.5567422956228256e-1
computeOpAdj(-1.0000000000000001e-1, -9.0000000000000002e-1, 2, 3.5567422956228256e-1)
--->
computeOpAdj(3.5567422956228256e-1 < computeProb(-1.0000000000000001e-1), 3.5567422956228256e-1
    < computeProb(-9.0000000000000002e-1), 2)
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> -1.0000000000000001e-1
computeProb(-1.0000000000000001e-1)
--->
5.0e-1 * (-1.0000000000000001e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
-1.0000000000000001e-1 + 1.0
--->
9.0000000000000002e-1
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 9.0000000000000002e-1
--->
4.5000000000000001e-1
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 4.5000000000000001e-1
--->
true
*********** equation
eq computeProb(o:Float) = 5.0e-1 * (o:Float + 1.0) .
o:Float --> -9.0000000000000002e-1
computeProb(-9.0000000000000002e-1)
--->
5.0e-1 * (-9.0000000000000002e-1 + 1.0)
*********** equation
(built-in equation for symbol _+_)
-9.0000000000000002e-1 + 1.0
--->
9.9999999999999978e-2
*********** equation
(built-in equation for symbol _*_)
5.0e-1 * 9.9999999999999978e-2
--->
4.9999999999999989e-2
*********** equation
(built-in equation for symbol _<_)
3.5567422956228256e-1 < 4.9999999999999989e-2
--->
false
*********** equation
eq computeOpAdj(true, false, S:Nat) = 2.0 / float(S:Nat) .
S:Nat --> 2
computeOpAdj(true, false, 2)
--->
2.0 / float(2)
*********** equation
(built-in equation for symbol float)
float(2)
--->
2.0
*********** equation
(built-in equation for symbol _/_)
2.0 / 2.0
--->
1.0
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 3
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >
ST:String --> "o"
F:Float --> -9.0000000000000002e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-9.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(-9.0000000000000002e-1)
--->
-8106479329266893/9007199254740992
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 0
SN:SetOpinion --> < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >,
    < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
ST:String --> "o"
F:Float --> -1.0000000000000001e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(0, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-1.0000000000000001e-1)
*********** equation
(built-in equation for symbol rat)
rat(-1.0000000000000001e-1)
--->
-3602879701896397/36028797018963968
*********** equation
eq group(AG:Agent, < nodes: SN:SetOpinion, < AG:Agent : [ST:String,F:Float] M:Memory > ; edges:
    SE:SetEdge > in step: STEPS:Nat comm: COMM:Nat strat: EDGES:SetEdge) = rat(F:Float) .
AG:Agent --> 3
SN:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >
ST:String --> "o"
F:Float --> -9.0000000000000002e-1
M:Memory --> ["g",1.0]
SE:SetEdge --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 >
STEPS:Nat --> 0
COMM:Nat --> 0
EDGES:SetEdge --> (empty).SetEdge
group(3, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
rat(-9.0000000000000002e-1)
*********** equation
(built-in equation for symbol rat)
rat(-9.0000000000000002e-1)
--->
-8106479329266893/9007199254740992
*********** equation
(built-in equation for symbol float)
float(-8106479329266893/9007199254740992)
--->
-9.0000000000000002e-1
*********** failure for condition fragment
BELIEF':Info := update(STATE:State, EDGES:SetEdge, AGENT:Agent)
*********** failure #11
*********** equation
(built-in equation for symbol metaApply)
metaApply(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, '<_:_>['s_^3['0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],
    '`[_`,_`]['"g".Char,'1.0.FiniteFloat]]], 'atomic,
  'AGENT:Agent <- 's_^3['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge], 0)
--->
(failure).ResultTriple?
*********** success for condition fragment
RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG : information(AG, STATE) >), 'atomic,
    SUBS:Substitution, 0)
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 3
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^3['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> (unbound)
*********** solving condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
*********** equation
(built-in equation for symbol _==_)
(failure).ResultTriple? == (failure).ResultTriple?
--->
true
*********** equation
(built-in equation for symbol if_then_else_fi)
if true then error else downTerm(getTerm((failure).ResultTriple?), error) fi
--->
error
*********** success for condition fragment
OP:Opinion := if RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(
    getTerm(RES?:ResultTriple?), error) fi
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 3
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^3['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
*********** success #10
*********** equation
ceq next(M:Module, AG, EDGES, STATE) = OP:Opinion if SUBS:Substitution :=
  'AGENT:Agent <- upTerm(AG) ;
  'BELIEF:Info <- upTerm(information(AG, STATE)) ;
  'EDGES:SetEdge <- upTerm(EDGES) ;
  'STATE:State <- upTerm(STATE) /\ RES?:ResultTriple? := metaApply(M:Module, upTerm(< AG :
    information(AG, STATE) >), 'atomic, SUBS:Substitution, 0) /\ OP:Opinion := if
    RES?:ResultTriple? == (failure).ResultTriple? then error else downTerm(getTerm(
    RES?:ResultTriple?), error) fi .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
AG --> 3
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SUBS:Substitution -->
  'AGENT:Agent <- 's_^3['0.Zero] ;
  'BELIEF:Info <- '__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`][
    '"g".Char,'1.0.FiniteFloat]] ;
  'EDGES:SetEdge <- '_`,_['<`(_`,_`):_>['0.Zero,'s_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>[
    's_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],
    '1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat]] ;
  'STATE:State <- '_in`step:_comm:_strat:_['<`nodes:_;`edges:_>['_`,_['<_:_>['0.Zero,'__[
    '`[_`,_`]['"o".Char,'-1.0000000000000001e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]],'<_:_>['s_['0.Zero],'__['`[_`,_`]['"o".Char,'1.0.FiniteFloat],
    '`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^2['0.Zero],'__['`[_`,_`]['"o".Char,
    '4.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,'-1.0.FiniteFloat]]],'<_:_>['s_^3[
    '0.Zero],'__['`[_`,_`]['"o".Char,'-9.0000000000000002e-1.FiniteFloat],'`[_`,_`]['"g".Char,
    '1.0.FiniteFloat]]]],'_`,_['<`(_`,_`):_>['0.Zero,'s_['0.Zero],'1.0.FiniteFloat],
    '<`(_`,_`):_>['0.Zero,'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['0.Zero,'s_^3[
    '0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_['0.Zero],'s_^2['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^2['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^2['0.Zero],
    's_^3['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],'0.Zero,'1.0.FiniteFloat],
    '<`(_`,_`):_>['s_^3['0.Zero],'s_['0.Zero],'1.0.FiniteFloat],'<`(_`,_`):_>['s_^3['0.Zero],
    's_^2['0.Zero],'1.0.FiniteFloat]]],'0.Zero,'0.Zero,'empty.SetEdge]
RES?:ResultTriple? --> (failure).ResultTriple?
OP:Opinion --> error
next(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, 3, (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), < nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
error
*********** equation
eq N:NeSetOpinion, N:NeSetOpinion = N:NeSetOpinion .
N:NeSetOpinion --> error
error, error
--->
error
*********** equation
eq step(M:Module, STATE, empty, SO:SetOpinion, EDGES) = < nodes: nodes(STATE) // SO:SetOpinion
    ; edges: edges(STATE) > in step: 1 + steps(STATE) comm: | non-self(EDGES) | + comm(STATE)
    strat: EDGES .
M:Module --> sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SO:SetOpinion --> error
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
step(sth 'TEST is
  including 'TEST .
  sorts none .
  none
  none
  none
  none
  none
  none
  none
endsth, < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty, empty, error, (<(0,3): 1.0 >, <(1,2): 1.0
    >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
< nodes: nodes(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2):
    1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1):
    1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) // error ; edges: edges(< nodes: <
    0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty) > in step: 1 + steps(< nodes: < 0 : ["o",
    -1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty) comm: | non-self((<(0,3): 1.0 >, <(1,2): 1.0 >, <(
    2,1): 1.0 >, <(3,0): 1.0 >)) | + comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0]
    >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : [
    "o",-9.0000000000000002e-1] ["g",1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0
    >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0
    >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty) strat: (
    <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >)
*********** equation
eq nodes(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = SN .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
nodes(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
*********** equation
eq SO:SetOpinion // SO':SetOpinion = minus(SO:SetOpinion, SO':SetOpinion, empty) .
SO:SetOpinion --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >
SO':SetOpinion --> error
(< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : ["o",
    4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >) //
    error
--->
minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >),
    error, empty)
*********** equation
eq edges(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = SE .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
edges(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
<(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,
    0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
*********** equation
eq steps(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = STEPS .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
steps(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,
    3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,
    2): 1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** trial #12
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 0
AG' --> 3
W --> 1.0
*********** solving condition fragment
AG =/= AG' = true
*********** equation
(built-in equation for symbol _=/=_)
0 =/= 3
--->
true
*********** success for condition fragment
AG =/= AG' = true
SE --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 0
AG' --> 3
W --> 1.0
*********** success #12
*********** equation
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 0
AG' --> 3
W --> 1.0
non-self((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
non-self((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >)), <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1):
    1.0 >, <(3,0): 1.0 >
*********** trial #13
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 1
AG' --> 2
W --> 1.0
*********** solving condition fragment
AG =/= AG' = true
*********** equation
(built-in equation for symbol _=/=_)
1 =/= 2
--->
true
*********** success for condition fragment
AG =/= AG' = true
SE --> <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 1
AG' --> 2
W --> 1.0
*********** success #13
*********** equation
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(2,1): 1.0 >, <(3,0): 1.0 >
AG --> 1
AG' --> 2
W --> 1.0
non-self((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
non-self((<(2,1): 1.0 >, <(3,0): 1.0 >)), <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** trial #14
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(3,0): 1.0 >
AG --> 2
AG' --> 1
W --> 1.0
*********** solving condition fragment
AG =/= AG' = true
*********** equation
(built-in equation for symbol _=/=_)
2 =/= 1
--->
true
*********** success for condition fragment
AG =/= AG' = true
SE --> <(3,0): 1.0 >
AG --> 2
AG' --> 1
W --> 1.0
*********** success #14
*********** equation
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> <(3,0): 1.0 >
AG --> 2
AG' --> 1
W --> 1.0
non-self((<(2,1): 1.0 >, <(3,0): 1.0 >))
--->
non-self(<(3,0): 1.0 >), <(2,1): 1.0 >, <(3,0): 1.0 >
*********** trial #15
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> (empty).SetEdge
AG --> 3
AG' --> 0
W --> 1.0
*********** solving condition fragment
AG =/= AG' = true
*********** equation
(built-in equation for symbol _=/=_)
3 =/= 0
--->
true
*********** success for condition fragment
AG =/= AG' = true
SE --> (empty).SetEdge
AG --> 3
AG' --> 0
W --> 1.0
*********** success #15
*********** equation
ceq non-self((SE, <(AG,AG'): W >)) = non-self(SE), SE, <(AG,AG'): W > if AG =/= AG' = true .
SE --> (empty).SetEdge
AG --> 3
AG' --> 0
W --> 1.0
non-self(<(3,0): 1.0 >)
--->
non-self(empty), <(3,0): 1.0 >
*********** equation
eq non-self(empty) = (empty).SetEdge .
empty substitution
non-self(empty)
--->
(empty).SetEdge
*********** equation
eq N:NeSetEdge, N:NeSetEdge = N:NeSetEdge .
N:NeSetEdge --> <(3,0): 1.0 >
<(2,1): 1.0 >, <(3,0): 1.0 >, <(3,0): 1.0 >
--->
<(2,1): 1.0 >, <(3,0): 1.0 >
*********** equation
eq N:NeSetEdge, N:NeSetEdge = N:NeSetEdge .
N:NeSetEdge --> <(2,1): 1.0 >, <(3,0): 1.0 >
<(1,2): 1.0 >, <(2,1): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,0): 1.0 >
--->
<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** equation
eq N:NeSetEdge, N:NeSetEdge = N:NeSetEdge .
N:NeSetEdge --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
<(0,3): 1.0 >, <(1,2): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >, <(3,
    0): 1.0 >
--->
<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
*********** equation
eq | S:SetEdge | = $card(S:SetEdge, 0) .
S:SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
| <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 > |
--->
$card((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 0)
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
E --> <(0,3): 1.0 >
C:Nat --> 0
$card((<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 0)
--->
$card((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 0 + 1)
*********** equation
(built-in equation for symbol _+_)
0 + 1
--->
1
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(2,1): 1.0 >, <(3,0): 1.0 >
E --> <(1,2): 1.0 >
C:Nat --> 1
$card((<(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >), 1)
--->
$card((<(2,1): 1.0 >, <(3,0): 1.0 >), 1 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 1
--->
2
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> <(3,0): 1.0 >
E --> <(2,1): 1.0 >
C:Nat --> 2
$card((<(2,1): 1.0 >, <(3,0): 1.0 >), 2)
--->
$card(<(3,0): 1.0 >, 2 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 2
--->
3
*********** equation
eq $card((S:SetEdge, E), C:Nat) = $card(S:SetEdge, C:Nat + 1) [owise] .
S:SetEdge --> (empty).SetEdge
E --> <(3,0): 1.0 >
C:Nat --> 3
$card(<(3,0): 1.0 >, 3)
--->
$card((empty).SetEdge, 3 + 1)
*********** equation
(built-in equation for symbol _+_)
1 + 3
--->
4
*********** equation
eq $card((empty).SetEdge, C:Nat) = C:Nat .
C:Nat --> 4
$card((empty).SetEdge, 4)
--->
4
*********** equation
eq comm(< nodes: SN ; edges: SE > in step: STEPS comm: COMM strat: EDGES) = COMM .
SN --> < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 0
COMM --> 0
EDGES --> (empty).SetEdge
comm(< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2
    : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] >
    ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty)
--->
0
*********** equation
(built-in equation for symbol _+_)
0 + 4
--->
4
*********** success for condition fragment
STATE' := step([moduleName], STATE, SETEDGE':SetEdge)
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE':SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
SSE:SetSetEdge --> mt
STATE' --> < nodes: minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >), error, empty) ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >,
    <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >,
    <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 1 comm: 4 strat: (<(
    0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >)
*********** success #2
*********** rule
crl STATE => STATE' if not consensus(STATE) = true /\ SETEDGE':SetEdge ; SSE:SetSetEdge :=
    strategy(edges(STATE), STATE) /\ STATE' := step([moduleName], STATE, SETEDGE':SetEdge) [
    label step] .
STATE --> < nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0]
    >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] > ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >,
    <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >,
    <(3,2): 1.0 > > in step: 0 comm: 0 strat: empty
SETEDGE':SetEdge --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
SSE:SetSetEdge --> mt
STATE' --> < nodes: minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] [
    "g",-1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",
    -9.0000000000000002e-1] ["g",1.0] >), error, empty) ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >,
    <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >,
    <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 1 comm: 4 strat: (<(
    0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >)
< nodes: < 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, < 2 : [
    "o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0] > ;
    edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3):
    1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2):
    1.0 > > in step: 0 comm: 0 strat: empty
--->
< nodes: minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >, <
    2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",1.0]
    >), error, empty) ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,
    2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,
    1): 1.0 >, <(3,2): 1.0 > > in step: 1 comm: 4 strat: (<(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1):
    1.0 >, <(3,0): 1.0 >)
*********** equation
eq consensus(< nodes: SO:SetOpinion ; edges: SE > in step: STEPS comm: COMM strat: EDGES) =
    consensus(SO:SetOpinion) .
SO:SetOpinion --> minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] >), error, empty)
SE --> <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0): 1.0 >, <(1,2): 1.0 >, <(1,3): 1.0
    >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0): 1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 >
STEPS --> 1
COMM --> 4
EDGES --> <(0,3): 1.0 >, <(1,2): 1.0 >, <(2,1): 1.0 >, <(3,0): 1.0 >
consensus(< nodes: minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] >), error, empty) ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0):
    1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0):
    1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 1 comm: 4 strat: (<(0,3): 1.0 >, <(1,2): 1.0
    >, <(2,1): 1.0 >, <(3,0): 1.0 >))
--->
consensus(minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >), error, empty))
*********** equation
eq consensus(SO:SetOpinion) = true [owise] .
SO:SetOpinion --> minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] >), error, empty)
consensus(minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",-1.0] >,
    < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1] ["g",
    1.0] >), error, empty))
--->
true

Solution 1 (state 1)
states: 2  rewrites: 417 in 0ms cpu (365ms real) (~ rewrites/second)
STATE --> < nodes: minus((< 0 : ["o",-1.0000000000000001e-1] ["g",1.0] >, < 1 : ["o",1.0] ["g",
    -1.0] >, < 2 : ["o",4.0000000000000002e-1] ["g",-1.0] >, < 3 : ["o",-9.0000000000000002e-1]
    ["g",1.0] >), error, empty) ; edges: <(0,1): 1.0 >, <(0,2): 1.0 >, <(0,3): 1.0 >, <(1,0):
    1.0 >, <(1,2): 1.0 >, <(1,3): 1.0 >, <(2,0): 1.0 >, <(2,1): 1.0 >, <(2,3): 1.0 >, <(3,0):
    1.0 >, <(3,1): 1.0 >, <(3,2): 1.0 > > in step: 1 comm: 4 strat: (<(0,3): 1.0 >, <(1,2): 1.0
    >, <(2,1): 1.0 >, <(3,0): 1.0 >)
Maude> next