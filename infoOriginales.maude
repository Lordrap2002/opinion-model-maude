***( Archivo con la informaci√≥n de los modelos originales )

load semantics .

mod DEFINITION is
    pr REW-RELATION .
    subsort Float < Info .
    subsort Nat < Agent .

    var AG          : Agent .
    var F           : Float .
    var SN          : SetOpinion .
    vars SE EDGES   : SetEdge .
    vars STEPS COMM : Nat .
    
    eq opinion(AG, < nodes: (< AG : F >, SN) ; edges: SE >  in step: STEPS comm: COMM strat: EDGES) = F .
    eq opinion(F) = F .
endm

mod DEGROOT is
    pr DEFINITION .

    vars AG AG' AG'' : Agent .
    vars SE EDGES    : SetEdge .
    var SO           : SetOpinion .
    vars STEPS COMM  : Nat .
    var NETWORK      : Network .
    vars SCOUNT SUMW : Float .
    vars PHI PHI' W  : Float .

    op deGroot : SetEdge -> SetSetEdge .
    eq deGroot(SE) = SE .

    op update-degroot : State SetEdge Agent -> Float .
    ceq update-degroot(NETWORK  in step: STEPS comm: COMM strat: EDGES, SE, AG) = 
        if SCOUNT == 0.0 then opinion(AG, NETWORK  in step: STEPS comm: COMM strat: EDGES)
            else opinion(AG,  NETWORK  in step: STEPS comm: COMM strat: EDGES) + (SUMW / SCOUNT)
        fi
        if 
            SCOUNT  := sum-W(AG, SE) /\ 
            SUMW := prod-diff(AG, nodes(NETWORK  in step: STEPS comm: COMM strat: EDGES ), SE) .

    op prod-diff : Agent SetOpinion SetEdge -> Float .
    op prod-diff : Agent SetOpinion SetEdge Float -> Float .
    eq prod-diff(AG, SO, SE) = prod-diff(AG, SO, SE, 0.0) .
    eq prod-diff(AG, SO, empty, SUMW) = SUMW .
    eq prod-diff(AG, (SO, < AG : PHI >, < AG' :  PHI' >), ( < (AG', AG ) :  W  >, SE), SUMW) = 
        prod-diff(AG, (SO, < AG : PHI >, < AG' : PHI' >), SE, SUMW + (PHI' - PHI) * W) .
    eq prod-diff(AG, SO, ( < (AG' , AG'') :  W  >, SE), SUMW) = 
        prod-diff(AG, SO, SE, SUMW) [owise] .

    op sum-W : Agent SetEdge -> Float .
    op sum-W : Agent SetEdge Float -> Float .
    eq sum-W(AG, SE) = sum-W(AG, SE, 0.0) .
    eq sum-W(AG, empty, SUMW) = SUMW .
    eq sum-W(AG, ( < (AG', AG ) :  W  >, SE), SUMW) = 
        sum-W(AG, SE , SUMW + W ) .
    eq sum-W(AG, ( < (AG' , AG'') :  W  >, SE), SUMW) = 
        sum-W(AG, SE, SUMW) [owise] .
endm

mod GOSSIP is
    pr DEFINITION .

    vars AG AG'     : Agent .
    vars SE EDGES   : SetEdge .
    vars STEPS COMM : Nat .
    var NETWORK     : Network .
    vars PHI PHI' W : Float .
    var STR         : SetSetEdge .
    var E           : Edge .

    op gossip  : SetEdge            -> SetSetEdge [memo] .
    op $gossip : SetEdge SetSetEdge -> SetSetEdge .

    eq gossip(SE) = $gossip(SE, mt) .
    eq $gossip(empty, STR) = STR .
    eq $gossip((E, SE), STR) = $gossip(SE, (STR ; E)) .


    op update-gossip : State SetEdge Agent -> Float .
    ceq update-gossip(NETWORK  in step: STEPS comm: COMM strat: EDGES, < (AG' , AG) : W >, AG) = 
      opinion(AG, NETWORK  in step: STEPS comm: COMM strat: EDGES) + W * (PHI' - PHI)
    if
      PHI  := opinion(AG, NETWORK  in step: STEPS comm: COMM strat: EDGES) /\
      PHI' := opinion(AG', NETWORK  in step: STEPS comm: COMM strat: EDGES) .
    eq update-gossip(NETWORK  in step: STEPS comm: COMM strat: EDGES, SE, AG) = 
      opinion(AG, NETWORK  in step: STEPS comm: COMM strat: EDGES) [owise] .
endm

mod HYBRID is 
    pr DEGROOT .

    var STATE      : State .
    var AG         : Agent .
    var E          : Edge .
    vars STR STR' : SetSetEdge .
    var SE         : SetEdge .
    var N          : Nat .

    op mt : -> SetSetEdge [ctor] .

    op hybrid  : SetEdge -> SetSetEdge [memo] .
    eq hybrid(empty) = mt .
    ceq hybrid((E, SE)) = 
        STR' ; add(E, STR') 
    if STR' := hybrid(SE) .

    op add  : Edge SetSetEdge            -> SetSetEdge .
    op $add : Edge SetSetEdge SetSetEdge -> SetSetEdge .
    eq add(E, STR) = $add(E, STR, mt) .
    eq $add(E, mt, STR') = E ; STR' .
    eq $add(E, (SE ; STR), STR') = $add(E, STR, STR' ; (E, SE)) .

    op filter= : Nat SetSetEdge -> SetSetEdge .
    eq filter=(N, mt) = mt .
    eq filter=(N, SE ; STR) = if | SE | == N then SE else mt fi ; filter=(N, STR) .
    op filter>= : Nat SetSetEdge -> SetSetEdge .
    eq filter>=(N, mt) = mt .
    eq filter>=(N, SE ; STR) = if | SE | >= N then SE else mt fi ; filter>=(N, STR) .
    op filter<= : Nat SetSetEdge -> SetSetEdge .
    eq filter<=(N, mt) = mt .
    eq filter<=(N, SE ; STR) = if | SE | <= N then SE else mt fi ; filter<=(N, STR) .

    op update-hybrid : State SetEdge Agent -> Float .
    eq update-hybrid(STATE, SE, AG) = update-degroot(STATE, SE, AG) .
    -----------------------------------------------------------------
    var AG' AG''    : Agent .
    var F F' F''    : Float .
    var SO          : SetOpinion .
    vars STEPS COMM : Nat .
    var E'          : SetSetEdge .
    
    op s1 : SetEdge State -> SetSetEdge .
    op s1 : SetEdge Agent -> SetSetEdge .
    eq s1(SE, STATE) = s1(SE, distant1(nodes(STATE), mean(STATE, incidents(SE)))) .
    eq s1((< (AG', AG) : F >, SE), AG) = < (AG', AG) : F > , s1(SE, AG) .
    eq s1((< (AG', AG'') : F >, SE), AG) = s1(SE, AG) .
    eq s1(empty, AG) = empty .

    op distant1 : SetOpinion Float -> Agent .
    op distant1 : SetOpinion Float Float Agent -> Agent .
    eq distant1((< AG : F' >, SO), F) = distant1(SO, F, F', AG) .
    ceq distant1((< AG : F'' >, SO), F, F', AG') = distant1(SO, F, F'', AG) if abs(F - F') < abs(F - F'') .
    ceq distant1((< AG : F'' >, SO), F, F', AG') = distant1(SO, F, F', AG') if abs(F - F') >= abs(F - F'') .
    eq distant1(empty, F, F', AG) = AG .
endm